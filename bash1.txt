

## Assignment: Bash Week five (5)
## Author: Howard Bates (hbates@northmen.org)
## Version: 10.10.2009.01
## Purpose: BASH: Scalars, arrays, constants, methods, parameters, code layout, sorting, loops, decisions, boolean

declare -A names
declare -i numNumbers
declare -i continueInt
declare -i counter
declare -ir TRUE=1

main() {
	clear
	setCounter
	setContinueInt
	while [ "$continueInt" -eq $TRUE ]  ## http://stackoverflow.com/questions/2188199/how-to-use-double-or-single-bracket-parentheses-curly-braces
	do
		setNumNumbers
		populateNumbersArray
		populateNames
		printNames
		#sortArrayBubble     ## Choose one
		#sortArrayInsertion  ## Choose one
		#sortArrayPerl       ## Choose one
		#printArrayNumbers
		setContinueInt
	done
	exit 0  ## https://askubuntu.com/questions/892604/meaning-of-exit-0-exit-1-and-exit-2-in-a-bash-script
}

setCounter() {
	if [ -n "$counter" ] ## http://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
	then
		(( counter++ )) ## Embedded let (( )), replaces let command pg.122 Linux Shell Scripting with Bash
	else
		counter=0
	fi
}

setContinueInt() {
	if [ -n "$continueInt" ]
	then
		continueInt=2
		while [ $continueInt -gt $TRUE ] || [ $continueInt -lt 0 ] ## https://stackoverflow.com/questions/669452/is-double-square-brackets-preferable-over-single-square-brackets-in-ba
		do
			read -p "Do you want to continue (0=no, 1=yes): " continueInt
			sleep 1
			if [ $continueInt -gt $TRUE ] || [ $continueInt -lt 0 ]
			then
				echo -e "\nIncorrect input. Please try again\n"
				sleep 1
				clear
			fi
		done
	else
		continueInt=1
	fi
	echo "continueInt = $continueInt"  ## https://stackoverflow.com/a/31320283/466246
}

setNumNumbers() {
	declare -ir MAX_NAMES=10
	if [ -z "$numNumbers" ]
	then
		numNumbers=0
	fi
	while [ $numNumbers -gt $MAX_NAMES ] || [ $numNumbers -le 0 ]
	do
		read -p "How many numbers are you entering (no more that ten)? " numNumbers
		if [ $numNumbers -gt $MAX_NAMES ] || [ $numNumbers -le 0 ]
		then
			echo -e "\nIncorrect input. Please try again\n"
			sleep 1
			clear
		fi
	done
}

populateNumbersArray() {
	declare -ai numbers
	while [ "$counter" -lt $numNumbers ]
	do
		while [ -z "${numbers[$counter]}" ] || [ "${numbers[$counter]}" -le 0 ]
		do
			read -p "Please enter number $counter (1 or bigger): " numbers[$counter]
			if [ "${numbers[$counter]}" -le 0 ]
			then
				echo -e "\nIncorrect input. Please try again\n"
				sleep 1
				clear
			fi
		done
		setCounter
	done
	printNumbers numbers[@] ## http://stackoverflow.com/questions/1063347/passing-arrays-as-parameters-in-bash
}

printNumbers() {
	declare -a numbersArray="${!1}" ## Syntax to receive multiple parameter arrays. Next one would be ${!2} and so on...
	echo -e ${numbersArray[@]}
}

populateNames() {
	for (( i=0; i < numNumbers; i++ ))
	do
		names[$i,0]=0
		while [[ ! "${names[$i,0]}" =~ [a-zA-Z] ]] || [[ "${#names[$i,0]}" -lt 2 ]] || [[ "${#names[$i,0]}" -gt 20 ]]
		do
			read -p "Enter name last name: " names[$i,0]
			if [[ ! "${names[$i,0]}" =~ [a-zA-Z] ]] || [[ "${#names[$i,0]}" -lt 2 ]] || [[ "${#names[$i,0]}" -gt 20 ]]
			then
					echo -e "\nIncorrect input. Please try again\n"
					sleep 1
					clear
			fi
		done

		names[$i,1]=0
		while [[ ! "${names[$i,1]}" =~ [a-zA-Z] ]] || [[ "${#names[$i,1]}" -lt 2 ]] || [[ "${#names[$i,1]}" -gt 20 ]] ## Validate for letters and array length
		do
			read -p "Enter name first name: " names[$i,1]
			if [[ ! "${names[$i,1]}" =~ [a-zA-Z] ]] || [[ "${#names[$i,1]}" -lt 2 ]] || [[ "${#names[$i,1]}" -gt 20 ]]
			then
				echo -e "\nIncorrect input. Please try again\n"
				sleep 1
				clear
			fi
		done
	done
}

#populateNames() {
#        for (( i=0; i < numNumbers; i++ ))
#        do
#                names[$i,0]=0
#                while [ ! $names[$i,0] =~ ^[a-zA-Z][a-zA-Z]{0,20}$ ]
#                do
#                        read -p "Enter name first name: " names[$i,0]
#                        if [ ! $names[$i,0] =~ ^[a-zA-Z][a-zA-Z]{0,20}$ ]
#                        then
#                                echo -e "\nIncorrect input. Please try again\n"
#                                sleep 1
#                                clear
#                        fi
#                done
#
#                names[$i,1]=0
#                while [ ! $names[$i,1] =~ ^[a-zA-Z][a-zA-Z]{0,20}$ ]
#                do
#                        read -p "Enter name last name: " names[$i,1]
#                        if [ ! $names[$i,1] =~ ^[a-zA-Z][a-zA-Z]{0,20}$ ]
#                        then
#                                echo -e "\nIncorrect input. Please try again\n"
#                                sleep 1
#                                clear
#                        fi
#                done
#        done
#}

printNames() {
	declare -ir COLUMNS=2
	for (( i=0; i < ${#names[@]}; i++ )) {  ## https://stackoverflow.com/questions/22619510/a-bash-loop-with-braces
		for (( j=0; j < COLUMNS; j++ )) {
			echo "${names[$i,$j]}"
		}
	}
}

main
#   1.) https://unix.stackexchange.com/questions/306111/what-is-the-difference-between-the-bash-operators-vs-vs-vs
#   2.) 

